#!/usr/bin/env python
import sys
import os
import os.path
from serial import SerialException

SAMPLE_TIME = 10 * 60
SLEEP_TIME  = 0.50

ROOT = os.path.abspath( os.path.join( os.path.dirname( __file__ ) , "../" ))
sys.path.insert(0 , os.path.join(ROOT , "lib"))
config_file = os.path.join( ROOT , "etc/config.json")

import dist

from friskby_client import FriskbyClient
from sampler import Sampler
from device_config import DeviceConfig
from git_module import GitModule

if os.getenv("FRISKBY_TEST"):
    try:
        from sds011 import SDS011
    except SerialException:
        from mock_sds011 import SDS011
else:
    from sds011 import SDS011


def install(config):
    git_module = GitModule( url = config.getRepoURL() )
    git_module.checkout( config.getGitRef( ) )
    git_module.runTests( "tests/run_tests" )
    git_module.install( ROOT , files = dist.files , directories = dist.directories )
    config.save( filename = config_file )


def restart(config):
    install(config)
    os.execl( __file__ , __file__)

    raise Exception("Fatal error: os.execl() returned - trying to rollback")


def network_block():
    timeout = 120
    start = datetime.datetime.now()
    while True:
        dt = datetime.datetime.now()
        if dt.total_seconds() > timeout:
            sys.exit("No network contact established - giving up")

        try:
            response = requests.get( url )
            if response.status_code == 200:
                break
        except Exception:
            time.sleep( 2 )
            



def rollback(config):
    install(config)

def main( argv ):
    network_block( )
    config = DeviceConfig( config_file )
    config.postGitVersion( )
    
    device_id = config.getDeviceID( )
    client_pm10 = FriskbyClient(config , "%s_PM10" % device_id)
    client_pm25 = FriskbyClient(config , "%s_PM25" % device_id)
    sampler = Sampler( SDS011(True) , SAMPLE_TIME , sleep_time = SLEEP_TIME )

    while True:
        print "sampling"
        data = sampler.collect( )
    
        print "Posting"
        client_pm10.post( data[0].mean() )
        client_pm25.post( data[1].mean() )

        new_config = config.downloadNew( )
        if new_config != config:
            try:
                print "Restarting"
                restart( new_config )
            except:
                rollback( config )


if __name__ == "__main__":
    main( sys.argv )
