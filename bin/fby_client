#!/usr/bin/env python
import sys
import os
from serial import SerialException
import datetime
import time
import requests
from traceback import format_exception


ROOT = os.path.abspath( os.path.join( os.path.dirname( __file__ ) , "../" ))
sys.path.insert(0 , os.path.join(ROOT , "lib"))
CONFIG_FILE = os.path.join( ROOT , "etc/config.json")
VAR_PATH = os.path.join(ROOT , "var")

import dist
from friskby_client import FriskbyClient
from sampler import Sampler
from device_config import DeviceConfig
from git_module import GitModule
if os.getenv("FRISKBY_TEST"):
    try:
        from sds011 import SDS011
    except SerialException:
        from mock_sds011 import SDS011
else:
    from sds011 import SDS011


class FbyRunner(object):

    def __init__(self, argv):
        self._sample_time = 10 * 60
        self._sleep_time  = 0.50
        self._exception_count = 0 #  #exceptions since last success
        self._accuracy = 4 # round observation to fourth digit
        self._config = None

    @staticmethod
    def install(config):
        git_module = GitModule( url = config.getRepoURL() )
        git_module.checkout( config.getGitRef( ) )
        git_module.runTests( "tests/run_tests" )
        git_module.install( ROOT , files = dist.files , directories = dist.directories )
        config.save( filename = CONFIG_FILE )


    @classmethod
    def rollback(cls, config):
        cls.install(config)


    @classmethod
    def restart(cls, config):
        cls.install(config)
        os.execl( __file__ , __file__)

        raise Exception("Fatal error: os.execl() returned - trying to rollback")

    @classmethod
    def updateClient(cls, config):
        new_config = config.downloadNew( )
        if config.updateRequired( new_config ):
            try:
                config.logMessage("Restarting client - new version:%s" % new_config.getGitRef())
                cls.restart( new_config )
            except Exception as exc:
                exc_type, exc_value, exc_tb = sys.exc_info()
                tb_list = format_exception( exc_type , exc_value , exc_tb)
                config.logMessage("Restart failed - trying rollback" , long_msg = "".join( tb_list ))
                cls.rollback( config )
                config.logMessage("Rollback complete")


    def collect(self, sampler, config):
        data = None
        try:
            data = sampler.collect( )
        except (SerialException, IOError) as err:
            if self._exception_count < 5:
                self._config.logMessage('Exception while collecting: %s' % str(err))
            self._exception_count += 1
            sys.stderr.write('Exception in collect %s\n' % str(err))
        return data


    def post(self, client_pm10, client_pm25, data):
        client_pm10.post( data[0].median() )
        client_pm25.post( data[1].median() )

    def run(self):
        network_block( )
        self._config = DeviceConfig( CONFIG_FILE )
        self._config.logMessage("Starting up")
        self._config.postGitVersion( )

        device_id = self._config.getDeviceID( )
        client_pm10 = FriskbyClient(self._config , "%s_PM10" % device_id, VAR_PATH)
        client_pm25 = FriskbyClient(self._config , "%s_PM25" % device_id, VAR_PATH)
        sampler = Sampler( SDS011(True) , self._sample_time , sleep_time = self._sleep_time, accuracy = self._accuracy )

        while True:
            if self._exception_count >= 5:
                time.sleep(30)
            try:
                data = self.collect(sampler , self._config)
                if not data:
                    continue

                self.post(client_pm10, client_pm25, data)

                self.updateClient( self._config )

            except Exception as a:
                err_msg = '(unknown error for %s)' % str(type(a))
                try:
                    err_msg = str(a)
                except Exception:
                    pass
                exc_type, exc_value, exc_tb = sys.exc_info()
                tb_list = format_exception( exc_type , exc_value , exc_tb)
                if self._exception_count < 5:
                    self._config.logMessage('Exception caught: "%s".' % err_msg, long_msg = "".join( tb_list ))
                self._exception_count += 1
            else:
                # try/except/else: if nothing has been raised we successfully posted
                self._exception_count = 0

def network_block():
    url = "http://www.google.com"
    timeout = 120
    start = datetime.datetime.now()
    while True:
        dt = datetime.datetime.now() - start
        if dt.total_seconds() > timeout:
            sys.exit("No network contact established - giving up")

        try:
            response = requests.get( url )
            if response.status_code == 200:
                break
        except Exception:
            time.sleep( 2 )


if __name__ == "__main__":
    fby = FbyRunner( sys.argv )
    fby.run()
