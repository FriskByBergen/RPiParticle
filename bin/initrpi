#!/usr/bin/env python
import sys
import requests
import json
import os.path
import subprocess

requirements_file = os.path.abspath( os.path.join( os.path.dirname( __file__ ) , "../requirements.txt" ))
ROOT = os.path.abspath( os.path.join( os.path.dirname( __file__ ) , "../" ))
sys.path.insert(0 , os.path.join(ROOT , "lib"))

default_root_url = "https://friskby.herokuapp.com"
sensor_path = "/sensor/api/device"

default_ROOT = "/tmp/friskby/testing"



import dist
from device_config import DeviceConfig
from git_module import GitModule
from wifi_config import WifiConfig



def configure_wifi():
    conf = WifiConfig()
    while True:
        try:
            ssid = raw_input("SSID.......: ")
            psk_key = raw_input("Password...: ")
            conf.addnetwork( ssid, psk_key )
            conf.save()
            break
        except:
            pass


def install_requirements( ):
    if not os.path.exists( requirements_file ):
        sys.exit("The requiremenents file:%s was no found" % requirements_file )
        
    print("Installing requirements from: %s" % requirements_file )

    with open(os.devnull , "wb") as dev_null:
        status = subprocess.call(["pip", "install", "-r", requirements_file ] , stdout = dev_null, stderr = None)
    if status != 0:
        msg = "Failed to install requirements. Need to run as sudo ?"
        sys.exit(msg)
        
    

install_requirements()

while True:
    config_wifi = raw_input("Configure wifi [y/N]: ")
    if config_wifi == "":
        config_wifi = "N"
        
    if config_wifi in ["y","Y"]:
        configure_wifi()
        break
    elif config_wifi in ["n","N"]:
        break
    

while True:
    device_id = raw_input("Device id....: ")
    root_url = raw_input("Root url for server (default: %s) .." % default_root_url)
    if root_url == "":
        root_url = default_root_url

    ROOT = raw_input("Installation root (default: %s) .." % default_ROOT)
    if ROOT == "":
        ROOT = default_ROOT
        
    print 

    config_url = root_url + "%s/%s/" % (sensor_path , device_id)
    print("Fetching config from:%s " % config_url)
    
    try:
        config = DeviceConfig.download( config_url )
        break
    except Exception as e:
        print("Failed to download configuration: %s\n" % e)

    

print("git clone: %s" % config.getRepoURL())
git_module = GitModule( url = config.getRepoURL() )

print("git checkout: %s" % config.getGitRef( ) )
git_module.checkout( config.getGitRef( ) )

print("Git local: %s" % git_module.getRoot( ))

git_module.runTests( "tests/run_tests" )


git_module.install( ROOT , dist.files , dist.directories )
config.save( filename = os.path.join(ROOT , "etc/config.json"))

