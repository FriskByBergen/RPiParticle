#!/usr/bin/env python
import sys
import requests
import json
import os.path
import stat
import subprocess

requirements_file = os.path.abspath( os.path.join( os.path.dirname( __file__ ) , "../requirements.txt" ))
dist_root = os.path.abspath( os.path.join( os.path.dirname( __file__ ) , "../" ))
sys.path.insert(0 , os.path.join(dist_root , "lib"))

default_root_url = "https://friskby.herokuapp.com"
sensor_path = "/sensor/api/device"
default_ROOT = "/usr/local/friskby"



import dist
from device_config import DeviceConfig
from git_module import GitModule
from wifi_config import WifiConfig
from service_config import ServiceConfig


def configure_wifi():
    conf = WifiConfig()
    while True:
        try:
            ssid = raw_input("SSID.........: ")
            psk_key = raw_input("Password.....: ")
            conf.addnetwork( ssid, psk_key )
            conf.save()

            WifiConfig.ifup( )
            break
        except KeyboardInterrupt:
            break
        except:
            pass


def configure_service(client_path):
    template = os.path.abspath( os.path.join( os.path.dirname( __file__ ) , "../share/friskby") )
    sc = ServiceConfig( template )
    config_file = "/etc/init.d/friskby"
    with open(config_file , "w") as f:
        f.write( sc.render( client_path , "friskby"))

    mode = os.stat( config_file )
    mode |= stat.S_IXUSR
    os.chmod( config_file , mode )


def install_requirements( ):
    if not os.path.exists( requirements_file ):
        sys.exit("The requiremenents file:%s was no found" % requirements_file )
        
    print("Installing requirements from: %s" % requirements_file )

    with open(os.devnull , "wb") as dev_null:
        status = subprocess.call(["pip", "install", "-r", requirements_file ] , stdout = dev_null, stderr = None)
    if status != 0:
        msg = "Failed to install requirements. Need to run as sudo ?"
        sys.exit(msg)
        
    

install_requirements()

while True:
    config_wifi = raw_input("Configure wifi [y/N]: ")
    if config_wifi == "":
        config_wifi = "N"
        
    if config_wifi in ["y","Y"]:
        configure_wifi()
        print("Wifi configuration saved\n")
        break
    elif config_wifi in ["n","N"]:
        break
    


while True:
    device_id = raw_input("Device id....: ")
    root_url = raw_input("Root url for server (default: %s) .." % default_root_url)
    if root_url == "":
        root_url = default_root_url

    ROOT = raw_input("Installation root (default: %s) .." % default_ROOT)
    if ROOT == "":
        ROOT = default_ROOT
        
    print 

    config_url = root_url + "%s/%s/" % (sensor_path , device_id)
    print("Fetching config from:%s " % config_url)
    
    try:
        config = DeviceConfig.download( config_url )
        break
    except Exception as e:
        print("Failed to download configuration: %s\n" % e)

    

print("git clone: %s" % config.getRepoURL())
git_module = GitModule( url = config.getRepoURL() )

print("git checkout: %s" % config.getGitRef( ) )
git_module.checkout( config.getGitRef( ) )

print("Git local: %s" % git_module.getRoot( ))

git_module.runTests( "tests/run_tests" )


git_module.install( ROOT , dist.files , dist.directories )
config.save( filename = os.path.join(ROOT , "etc/config.json"))

while True:
    config_service = raw_input("Configure service [y/N]: ")
    if config_service == "":
        config_service = "N"
        
    if config_service in ["y","Y"]:
        configure_service( os.path.join(ROOT , "bin/fby_client"))
        print("Service configuration saved\n")
        break
    elif config_service in ["n","N"]:
        break


